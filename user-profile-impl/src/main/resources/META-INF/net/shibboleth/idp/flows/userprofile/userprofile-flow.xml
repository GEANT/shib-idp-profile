<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">

    <action-state id="Initialize">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="InitializeRelyingPartyContext" />
        <evaluate expression="PopulateMetricContext" />
        <evaluate expression="FlowStartPopulateAuditContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="SelectConfiguration" />
    </action-state>

    <action-state id="SelectConfiguration">
        <evaluate expression="SelectRelyingPartyConfiguration" />
        <evaluate expression="SelectProfileConfiguration" />
        <evaluate expression="PostLookupPopulateAuditContext" />
        <evaluate expression="PopulateInboundInterceptContext" />
        <evaluate expression="PopulateUserAgentContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckInboundInterceptContext" />
    </action-state>

    <decision-state id="CheckInboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="PopulateClientStorageLoadContext" else="DoInboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoInboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="PopulateClientStorageLoadContext" />
    </subflow-state>

    <action-state id="PopulateClientStorageLoadContext">
        <evaluate expression="PopulateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ClientStorageLoad" />
        <transition on="NoLoadNeeded" to="PostInitialSetup" />
    </action-state>

    <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="PostInitialSetup" />
    </subflow-state>

    <action-state id="PostInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckPostAuthnInterceptContext" />
        <transition on="RestartAuthentication" to="PostInitialSetup" />
    </subflow-state>

    <decision-state id="CheckPostAuthnInterceptContext">
        <if
            test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="PopulateClientStorageSaveContext" else="DoPostAuthnInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="PopulateClientStorageSaveContext" />
        <transition on="RestartAuthentication" to="PostInitialSetup" />
    </subflow-state>

    <action-state id="PopulateClientStorageSaveContext">
        <evaluate expression="UpdateSessionWithSPSession" />
        <evaluate expression="PopulateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ClientStorageSave" />
        <transition on="NoSaveNeeded" to="InitializeUserProfileContext" />
        <transition to="HandleError" />
    </action-state>

    <subflow-state id="ClientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="InitializeUserProfileContext"/>
        <transition to="HandleError" />
    </subflow-state>

    <action-state id="InitializeUserProfileContext">
        <evaluate expression="InitializeUserProfileContext" />
        <!-- Attach metadata -->
        <!-- Resolve user attributes for rp none -->
        <!-- Render user profile attributes for rp none -->
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="RenderIdPAttributes" />
        <evaluate expression="RenderUserProfileContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="UserProfileViewPersonalData" />
    </action-state>

    <view-state id="UserProfileViewPersonalData" view="userprofile-pd">
        <on-entry>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="new net.shibboleth.idp.consent.logic.impl.AttributeDisplayNameFunction(flowRequestContext.getExternalContext().getNativeRequest(), FallbackLanguages, flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.AttributeRegistryService'))"
                                                                                               result="viewScope.attributeDisplayNameFunction" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(org.geant.shibboleth.plugin.userprofile.context.UserProfileContext))" result="viewScope.userProfileContext" />
        </on-entry>
        <transition on="personalData" to="UserProfileViewPersonalData" />
        <transition on="connectedOrganizations" to="UserProfileViewConnectedOrganizations" />
        <transition on="activityPage" to="UserProfileViewActivityPage" />
        <transition on="allOrganizations" to="UserProfileViewAllOrganizations" />
    </view-state>
    
    <view-state id="UserProfileViewConnectedOrganizations" view="userprofile-co">
        <on-entry>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="new net.shibboleth.idp.consent.logic.impl.AttributeDisplayNameFunction(flowRequestContext.getExternalContext().getNativeRequest(), FallbackLanguages, flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.AttributeRegistryService'))"
                                                                                               result="viewScope.attributeDisplayNameFunction" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(org.geant.shibboleth.plugin.userprofile.context.UserProfileContext))" result="viewScope.userProfileContext" />
        </on-entry>
        <transition on="personalData" to="UserProfileViewPersonalData" />
        <transition on="connectedOrganizations" to="UserProfileViewConnectedOrganizations" />
        <transition on="activityPage" to="UserProfileViewActivityPage" />
        <transition on="allOrganizations" to="UserProfileViewAllOrganizations" />
    </view-state>
    
    <view-state id="UserProfileViewActivityPage" view="userprofile-ap">
        <on-entry>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="new net.shibboleth.idp.consent.logic.impl.AttributeDisplayNameFunction(flowRequestContext.getExternalContext().getNativeRequest(), FallbackLanguages, flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.AttributeRegistryService'))"
                                                                                               result="viewScope.attributeDisplayNameFunction" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(org.geant.shibboleth.plugin.userprofile.context.UserProfileContext))" result="viewScope.userProfileContext" />
        </on-entry>
        <transition on="personalData" to="UserProfileViewPersonalData" />
        <transition on="connectedOrganizations" to="UserProfileViewConnectedOrganizations" />
        <transition on="activityPage" to="UserProfileViewActivityPage" />
        <transition on="allOrganizations" to="UserProfileViewAllOrganizations" />
    </view-state>
    
    <view-state id="UserProfileViewAllOrganizations" view="userprofile-ao">
        <on-entry>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="new net.shibboleth.idp.consent.logic.impl.AttributeDisplayNameFunction(flowRequestContext.getExternalContext().getNativeRequest(), FallbackLanguages, flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.AttributeRegistryService'))"
                                                                                               result="viewScope.attributeDisplayNameFunction" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(org.geant.shibboleth.plugin.userprofile.context.UserProfileContext))" result="viewScope.userProfileContext" />
        </on-entry>
        <transition on="personalData" to="UserProfileViewPersonalData" />
        <transition on="connectedOrganizations" to="UserProfileViewConnectedOrganizations" />
        <transition on="activityPage" to="UserProfileViewActivityPage" />
        <transition on="allOrganizations" to="UserProfileViewAllOrganizations" />
        <transition on="showAttributes" to="ResolveRPAttributes" />
    </view-state>

    <action-state id="ResolveRPAttributes">
        <evaluate expression="ExtractRelyingPartyIdFromRequest" />
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterRPAttributes" />
        <evaluate expression="RenderRPAttributes" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="UserProfileViewAllOrganizations" />
    </action-state>

    <!-- Error views, handling and end states -->

    <!-- Passthrough state if an exception is thrown. -->
    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate
                expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.saml.profile').error('Uncaught runtime exception', flowExecutionException.getCause())" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        <transition to="HandleError" />
    </action-state>

    <!-- First we check if error is mapped as local audited error -->
    <decision-state id="HandleError">
        <if
            test="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').containsKey(currentEvent.id) and flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').get(currentEvent.id)"
            then="AuditedErrorView" else="ErrorView" />
    </decision-state>

    <end-state id="AuditedErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)"
                result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()"
                result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()"
                result="requestScope.response" />
            <evaluate
                expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null"
                result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
    </end-state>

    <end-state id="ErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)"
                result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()"
                result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()"
                result="requestScope.response" />
            <evaluate
                expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null"
                result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
    </end-state>
    
    <!-- all unhandled non proceed results are turned into errors -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleError" />
    </global-transitions>

    <bean-import resource="userprofile-beans.xml" />

</flow>

